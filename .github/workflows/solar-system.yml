name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature-*'
      - 'feature/*'
env:
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  MONGO_URI: ${{ vars.MONGO_URI }}
jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ubuntu-latest
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
          MONGO_URI: 'mongodb://localhost:27017/superData'

        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: 20

        - name: Composite Action - Cache Install NPM Packages
          uses: ./.github/custom-action/npm-action
          with:
            path-of-folder: node_modules # can provide as input/var/secret

        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test
          
        - name: Archive Test Result
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
      name: Code Coverage
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: 20

        - name: Composite Action - Cache Install NPM Packages
          uses: ./.github/custom-action/npm-action
          with:
            path-of-folder: node_modules # can provide as input/var/secret

        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive Test Coverage Result
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5
    docker:
      name: Containerization
      needs: [unit-testing, code-coverage]
      runs-on: ubuntu-latest
      permissions:
        packages: write
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: GHCR Login
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Docker build for Testing
          uses: docker/build-push-action@v6
          with:
            context: .
            push: false
            tags: ${{ secrets.DOCKERHUB_USERNAME }}/solar-systems:${{ github.sha }}

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ secrets.DOCKERHUB_USERNAME }}/solar-systems:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP
            
            echo testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

        - name: Docker push
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: |
              ${{ secrets.DOCKERHUB_USERNAME }}/solar-systems:${{ github.sha }}
              ghcr.io/${{ github.repository_owner }}/solar-systems:${{ github.sha }}

    dev-deploy:
      if: contains(github.ref, 'feature-')
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}
        dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}



    dev-integration-test:
      if: contains(github.ref, 'feature-')
      name: Dev Integration Testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL }}
          run: |
            echo $URL
            echo "-----------------------------------------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live

#---------------------------------------------------- PRODUCTION -----------------------------------------------------------------------------------------------------
    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: docker
      uses: ./.github/workflows/reuse-deployment.yml
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}
        dockerhub-username: ${{ secrets.DOCKERHUB_USERNAME }}


    prod-integration-test:
      if: github.ref == 'refs/heads/main'
      name: Prod Integration Testing
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL Output using CURL and JQ
          env:
            URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL }}
          run: |
            echo $URL
            echo "-----------------------------------------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live